#!/usr/bin/env python
# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------------------------------------------------


DESCRIPTIONS = {
    "1, 0": "Специализированные автоматы и полуавтоматы",
    "1, 1": "Одношпиндельные автоматы и полуавтоматы",
    "1, 2": "Многошпиндельные автоматы и полуавтоматы",
    "1, 3": "Револьверные",
    "1, 4": "Сверлильно-отрезные",
    "1, 5": "Карусельные",
    "1, 6": "Токарные и лобовые",
    "1, 7": "Многорезцовые",
    "1, 8": "Специализированные",
    "1, 9": "Разные токарные",

    "2, 1": "Вертикально-сверлильные",
    "2, 2": "Полуавтоматы одношпиндельные",
    "2, 3": "Полуавтоматы многошпиндельные",
    "2, 4": "Координатно-расточные",
    "2, 5": "Радиально-сверлильные",
    "2, 6": "Горизонтально-расточные",
    "2, 7": "Алмазно-расточные",
    "2, 8": "Горизонтально-сверлильные",
    "2, 9": "Разные",

    "3, 1": "Круглошлифовальные",
    "3, 2": "Внутришлифовальные",
    "3, 3": "Универсальные шлифовальные",
    "3, 4": "Специализированные шлифовальные",
    "3, 6": "Заточные",
    "3, 7": "Плоско-шлифовальные",
    "3, 8": "Притирочные и полировочные",
    "3, 9": "Разные, работающие абразивом",
    
    "4, 1": "Универсальные",
    "4, 2": "Полуавтоматы",
    "4, 3": "Автоматы",

    "5, 0": "Резьбонарезные",
    "5, 1": "Зубодолбежные для нарезания цилиндрических колес",
    "5, 2": "Зуборезные для нарезания конических колес",
    "5, 3": "Зубофрезерные",
    "5, 4": "Для нарезания червячных колес",
    "5, 5": "Для обработки торцов зубьев",
    "5, 6": "Резьбофрезерные",
    "5, 7": "Зубо-отделочные и проверочные",
    "5, 8": "Зубо- и резьбошлифовальные",
    "5, 9": "Разные зубо- и резьбообрабатывающие",

    "6, 1": "Вертикальные консольные",
    "6, 2": "Непрерывного действия",
    "6, 4": "Копировальные и гравировальные",
    "6, 5": "вертикальные безконсольные",
    "6, 6": "Продольные",
    "6, 7": "Консольные широкоуниверсальные",
    "6, 8": "Горизонтальные консольные",
    "6, 9": "Разные",

    "7, 1": "Продольные одностоечные",
    "7, 2": "Продольные Двустоечные",
    "7, 3": "Поперечно строгальные",
    "7, 4": "Долбежные",
    "7, 5": "Протяжные горизонтальные",
    "7, 7": "Протяжные вертикальные",
    "7, 9": "Разные строгальные",

    "8, 1": "Разрезные, работающие: токарным резцом",
    "8, 2": "Разрезные, работающие: абразивным кругом",
    "8, 3": "Разрезные, работающие: Гладкими или насечным диском",
    "8, 4": "Правильно-отрезные",
    "8, 5": "Пилы ленточные",
    "8, 6": "Пилы дисковые",
    "8, 7": "Пилы (ножовки)",


    "9, 0": "Опиловочные",
    "9, 1": "Пилонакатательные",
    "9, 2": "Правильно- и безцентровообдирочные",
    "9, 3": "Балансировочные",
    "9, 5": "Для испытания сверл и шлифовальных кругов",
    "9, 6": "Делительные",
}


class MachineTypeField:
    """Дескриптор для поля типа станков"""

    def __init__(self):
        self._value = None
        self._group = None  # Добавляем поле для хранения группы

    def __get__(self, instance, owner):
        if instance is None:
            return self
        if self._value is None:
            return None
        key = f"{self._group},{self._value}"
        return {self._value: DESCRIPTIONS.get(key, "Неизвестный тип станка")}

    def __set__(self, instance, value):
        if value is None:
            self._value = None
            return

        try:
            value = int(value)
            if not 0 <= value <= 9:  # Проверяем диапазон значений
                raise ValueError(f"Недопустимое значение для типа станков: {value}")
            self._value = value
        except (ValueError, TypeError) as e:
            raise ValueError(f"Недопустимое значение для типа станков: {value}") from e

    def set_group(self, group):
        """Устанавливает группу станка"""
        self._group = group

    @property
    def str(self):
        """Возвращает описание типа станков"""
        if self._value is None or self._group is None:
            return ""
        key = f"{self._group},{self._value}"
        return DESCRIPTIONS.get(key, "Неизвестный тип станка")


if __name__ == "__main__":
    from machine_tools.app.fields.machine_group import MachineGroupField

    class Machine:
        group = MachineGroupField()
        type = MachineTypeField()

        def __init__(self):
            self.group = None
            self.type = None

        def __setattr__(self, name, value):
            super().__setattr__(name, value)
            if name == 'group' and value is not None and self.type is not None:
                self.type.set_group(value)

    machine = Machine()

    # Можно присваивать числа
    machine.group = 1  # OK
    machine.type = 0  # OK
    print(machine.type)  # {0: "Токарно-винторезные станки"}

    machine.group = 2  # OK
    machine.type = 0  # OK
    print(machine.type)  # {0: "Вертикально-сверлильные станки"}

    # machine.type = 10  # ValueError: Недопустимое значение д